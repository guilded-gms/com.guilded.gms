<?phpnamespace gms\system\event\type;use gms\data\event\EventDateList;use wcf\data\object\type\ObjectTypeCache;use wcf\system\SingletonFactory;/** * Handles event types and events. * * @author	Jeffrey Reichardt * @copyright	2012-2014 DevLabor UG (haftungsbeschrÃ¤nkt) * @license	CC BY-NC-SA 3.0 <http://creativecommons.org/licenses/by-nc-sa/3.0/deed> * @package	com.guilded.gms * @subpackage	system.event.type * @category	Guilded 2.0 */class EventTypeHandler extends SingletonFactory {	/**	 * list of available object types	 * @var array	 */	protected $objectTypes = array();		/**	 * Holds a list of all unearned achievements.	 */	protected $events = array();		/**	 * @see wcf\system\SingletonFactory::init()	 */	protected function init() {		// get available object types		$this->objectTypes = ObjectTypeCache::getInstance()->getObjectTypes('com.guilded.gms.event.type');		foreach ($this->objectTypes as $typeName => $object) {			$this->objectTypes[$typeName] = $object->getProcessor();		}				$this->loadEvents();	}			/**	 * Loads all events.	 */	protected function loadEvents() {		$eventList = new EventDateList;		$eventList->sqlLimit = 0;		$eventList->readObjects();						$this->events = $eventList->getObjects();				foreach ($this->events as $event) {			$this->objectTypes[$event->getType()->objectType][] = $event;		}	}		/**	 * Returns a list of available object types.	 * 	 * @return	array<wcf\system\event\type\IEventType>	 */	public function getObjectTypes() {		return $this->objectTypes;	}		/**	 * Returns a list of available achievements.	 * 	 * @return	array<wcf\data\user\achievements\UserAchievement>	 */	public function getEvents() {		return $this->events;	}}